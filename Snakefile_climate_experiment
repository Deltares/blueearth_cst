import shutil
import os
import sys
import numpy as np
import pandas as pd

# Parsing the Snakemake config file (options for basins to build, data catalog, model output directory)
#configfile: "config/snake_config_test.yml"
# read path of the config file to give to the weagen scripts
args = sys.argv
config_path = args[args.index("--configfile") + 1]

project = config['project_name']
project_dir = config['project_dir']
experiment = config['experiment_name']
RLZ_NUM = config['realizations_num']
ST_NUM = config['temp']['step_num'] * config['precip']['step_num']

DATA_SOURCES = config["data_sources"]

basin_dir = f"{project_dir}/hydrology_model"
exp_dir = f"{project_dir}/climate_{experiment}"

# Time horizon historical
starttime = config['starttime']
endtime = config['endtime']
clim_source = config["clim_historical"]

# Time horizon climate experiment
starttime_climate = config['starttime_climate']

# Master rule: end with all model run and analysed with saving a output plot
rule all:
    input:
        mean = f"{exp_dir}/model_results/mean.csv",
        rlz_nc = expand((f"{basin_dir}/run_climate_{experiment}/output_rlz_"+"{rlz_num}"+"_cst_"+"{st_num2}"+".csv"), rlz_num=np.arange(1, RLZ_NUM+1), st_num2=np.arange(0, ST_NUM+1)),
        #f"{exp_dir}/realization_{RLZ_NUM}/rlz_{RLZ_NUM}_historical.nc",
        #f"{exp_dir}/stress_test/cst_{ST_NUM}.csv"

# Rule to extract historic climate data at native resolution for the project area
rule extract_climate_grid:
    input:
        prj_region = ancient(f"{basin_dir}/staticgeoms/region.geojson"),
    params:
        data_sources = DATA_SOURCES,
        starttime = starttime,
        endtime = endtime,
        clim_source = clim_source,
    output:
        climate_nc = f"{project_dir}/climate_historical/raw_data/extract_historical.nc",
    container:
        "singularity/hydromt-wflow.sif"
    script:
        "src/extract_historical_climate.py"

# Prepare stress test experiment
rule climate_stress_parameters:
    input:
        config = config_path,
    output:
        st_csv_fns = [f"{exp_dir}/stress_test/cst_{st_num}.csv" for st_num in np.arange(1, ST_NUM+1)]
    container:
        "singularity/hydromt-wflow.sif"
    script:
        "src/prepare_cst_parameters.py"

# Preapre config files for the weather generator
rule prepare_weagen_config:
    output:
        weagen_config = f"{exp_dir}/weathergen_config.yml",
    params:
        cftype = "generate",
        default_config = config_path,
        output_path = f"{exp_dir}/",
        start_year = starttime_climate,
        sim_years = (pd.to_datetime(endtime).year - pd.to_datetime(starttime).year + 1), # + 2),
        nc_file_prefix = "rlz"
    container:
        "singularity/hydromt-wflow.sif"
    script:
        "src/prepare_weagen_config.py"

rule prepare_weagen_config_st:
    output:
        weagen_config = f"{exp_dir}/realization_"+"{rlz_num}"+"/weathergen_config_rlz_"+"{rlz_num}"+"_cst_"+"{st_num}"+".yml",
    params:
        cftype = "stress_test",
        default_config = config_path,
        output_path = f"{exp_dir}/realization_"+"{rlz_num}"+"/",
        nc_file_prefix = "rlz_"+"{rlz_num}"+"_cst",
        nc_file_suffix = "{st_num}",
    container:
        "singularity/hydromt-wflow.sif"
    script:
        "src/prepare_weagen_config.py"

# Prepare climate realization
rule generate_weather_realization:
    input:
        climate_nc = ancient(f"{project_dir}/climate_historical/raw_data/extract_historical.nc"),
        weagen_config = f"{exp_dir}/weathergen_config.yml",
    output:
        [f"{exp_dir}/realization_{rlz_num}/rlz_{rlz_num}_cst_0.nc" for rlz_num in np.arange(1, RLZ_NUM+1)]
    container:
        "singularity/weathergenr.sif"
    shell:
        """Rscript --no-save --no-restore src/weathergen/generate_weather.R {input.climate_nc} {input.weagen_config} """

# Prepare climate stress tests
rule generate_climate_stress_test:
    input:
        rlz_nc = f"{exp_dir}/realization_"+"{rlz_num}"+"/rlz_"+"{rlz_num}"+"_cst_0.nc",
        st_csv = f"{exp_dir}/stress_test/cst_"+"{st_num}"+".csv",
        weagen_config = f"{exp_dir}/realization_"+"{rlz_num}"+"/weathergen_config_rlz_"+"{rlz_num}"+"_cst_"+"{st_num}"+".yml",
    output:
        rlz_st_nc = f"{exp_dir}/realization_"+"{rlz_num}"+"/rlz_"+"{rlz_num}"+"_cst_"+"{st_num}"+".nc"
    container:
        "singularity/weathergenr.sif"
    shell:
        """Rscript  --no-save --no-restore src/weathergen/impose_climate_change.R {input.rlz_nc} {input.weagen_config} {input.st_csv} """

# Prepare data catalog of the climate files
rule climate_data_catalog:
    input:
        cst_nc = expand((f"{exp_dir}/realization_"+"{rlz_num}"+"/rlz_"+"{rlz_num}"+"_cst_"+"{st_num}"+".nc"), rlz_num = np.arange(1, RLZ_NUM+1), st_num = np.arange(1, ST_NUM+1)),
        rlz_nc = [f"{exp_dir}/realization_{rlz_num}/rlz_{rlz_num}_cst_0.nc" for rlz_num in np.arange(1, RLZ_NUM+1)]
    output:
        clim_data = f"{exp_dir}/data_catalog_climate_experiment.yml"
    params:
        data_sources = DATA_SOURCES,
        clim_source = clim_source,
    container:
        "singularity/hydromt-wflow.sif"
    script:
        "src/prepare_climate_data_catalog.py"

# Downscale climate forcing for use with wflow
rule downscale_climate_realization:
    input:
        nc = f"{exp_dir}/realization_"+"{rlz_num}"+"/rlz_"+"{rlz_num}"+"_cst_"+"{st_num2}"+".nc",
        data_sources = [f"{exp_dir}/data_catalog_climate_experiment.yml", DATA_SOURCES]
    output:
        nc = f"{exp_dir}/realization_"+"{rlz_num}"+"/inmaps_rlz_"+"{rlz_num}"+"_cst_"+"{st_num2}"+".nc",
        toml = f"{basin_dir}/run_climate_{experiment}/wflow_sbm_rlz_"+"{rlz_num}"+"_cst_"+"{st_num2}"+".toml"
    params:
        model_dir = basin_dir,
        clim_source = clim_source,
    container:
        "singularity/hydromt-wflow.sif"
    script:
        "src/downscale_climate_forcing.py"

# Run Wflow for all climate forcing
rule run_wflow:
    input:
        forcing_fid = f"{exp_dir}/realization_"+"{rlz_num}"+"/inmaps_rlz_"+"{rlz_num}"+"_cst_"+"{st_num2}"+".nc",
        toml_fid = f"{basin_dir}/run_climate_{experiment}/wflow_sbm_rlz_"+"{rlz_num}"+"_cst_"+"{st_num2}"+".toml"
    output:
        csv_file = f"{basin_dir}/run_climate_{experiment}/output_rlz_"+"{rlz_num}"+"_cst_"+"{st_num2}"+".csv"
    container:
        "singularity/wflow-cli.sif"
    shell:
        """ julia --threads 4 -e 'import Pkg; Pkg.add("Wflow"); using Wflow; Wflow.run()' "{input.toml_fid}" """

rule export_wflow_results:
    input:
        rlz_csv_fns = expand((f"{basin_dir}/run_climate_{experiment}/output_rlz_"+"{rlz_num}"+"_cst_"+"{st_num2}"+".csv"), rlz_num=np.arange(1, RLZ_NUM+1), st_num2=np.arange(0, ST_NUM+1)),
    output:
        mean = f"{exp_dir}/model_results/mean.csv",
        min = f"{exp_dir}/model_results/min.csv",
        max = f"{exp_dir}/model_results/max.csv",
        q95 = f"{exp_dir}/model_results/q95.csv",
    params:
        model_dir = basin_dir,
        exp_dir = exp_dir,
    container:
        "singularity/hydromt-wflow.sif"
    script:
        "src/export_wflow_results.py"
