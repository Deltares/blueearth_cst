import sys

# Get the snake_config file from the command line
args = sys.argv
config_path = args[args.index("--configfile") + 1]

# Parsing the Snakemake config file (options for basins to build, data catalog, model output directory)
# Function to get argument from config file and return default value if not found
def get_config(config, arg, default=None, optional=True):
    """
    Function to get argument from config file and return default value if not found

    Parameters
    ----------
    config : dict
        config file
    arg : str   
        argument to get from config file
    default : str/int/float/list, optional
        default value if argument not found, by default None
    optional : bool, optional
        if True, argument is optional, by default True
    """
    if arg in config:
        return config[arg]
    elif optional:
        return default
    else:
        raise ValueError(f"Argument {arg} not found in config file")

project_dir = get_config(config, 'project_dir', optional=False)
static_dir = get_config(config, 'static_dir', optional=False)
model_region = get_config(config, 'model_region', optional=False)
model_resolution = get_config(config, 'model_resolution', 0.00833333)
model_build_config = get_config(config, 'model_build_config', f'{static_dir}/wflow_build_model.yml')
waterbodies_config = get_config(config, 'waterbodies_config', f'{static_dir}/wflow_update_waterbodies.yml')
DATA_SOURCES = get_config(config, "data_sources", optional=False)

output_locations = get_config(config, "output_locations", None)
observations_timeseries = get_config(config, "observations_timeseries", None)

wflow_outvars = get_config(config, "wflow_outvars", ['river discharge'])

basin_dir = f"{project_dir}/hydrology_model"

# Master rule: end with all model run and analysed with saving a output plot
rule all:
    input: 
        f"{project_dir}/plots/wflow_model_performance/hydro_wflow_1.png",
        f"{project_dir}/plots/wflow_model_performance/basin_area.png",
        f"{project_dir}/plots/wflow_model_performance/precip.png",
        f"{project_dir}/config/snake_config_model_creation.yml",

# Rule to copy config files to the project_dir/config folder
rule copy_config:
    input:
        config_build = model_build_config,
        config_snake = config_path,
        config_waterbodies = waterbodies_config,
    params:
        data_catalogs = DATA_SOURCES,
        workflow_name = "model_creation",
    output:
        config_snake_out = f"{project_dir}/config/snake_config_model_creation.yml",
    script:
        "src/copy_config_files.py"

# Rule to build model hydromt build wflow
rule create_model:
    input:
        hydromt_ini = f"{static_dir}/wflow_build_model.yml",
    output:
        basin_nc = f"{basin_dir}/staticmaps.nc",
    shell:
        """hydromt build wflow "{basin_dir}" --region "{model_region}" --opt setup_basemaps.res="{model_resolution}" -i "{input.hydromt_ini}" -d "{DATA_SOURCES}" --fo -vv"""

# Rule to add reservoirs, lakes and glaciers to the built model (temporary hydromt fix)
# Can be moved back to create_model rule when hydromt is updated
rule add_reservoirs_lakes_glaciers:
    input:
        basin_nc = ancient(f"{basin_dir}/staticmaps.nc")
    output:
        text_out = f"{basin_dir}/staticgeoms/reservoirs_lakes_glaciers.txt"
    params:
        data_catalog = DATA_SOURCES,
        config = waterbodies_config,
    script:
        "src/setup_reservoirs_lakes_glaciers.py"

# Rule to add gauges to the built model
rule add_gauges_and_outputs:
    input:
        basin_nc = ancient(f"{basin_dir}/staticmaps.nc"),
        text = f"{basin_dir}/staticgeoms/reservoirs_lakes_glaciers.txt"
    output:
        gauges_fid = f"{basin_dir}/staticgeoms/gauges.geojson"
    params:
        output_locs = output_locations,
        outputs = wflow_outvars,
        data_catalog = DATA_SOURCES
    script:
        "src/setup_gauges_and_outputs.py"

# Rule to prepare the time horizon
rule setup_runtime:
    input:
        gauges_fid = f"{basin_dir}/staticgeoms/gauges.geojson"
    output:
        forcing_yml = f"{project_dir}/config/wflow_build_forcing_historical.yml"
    params:
        starttime = get_config(config, "starttime", optional=False),
        endtime = get_config(config, "endtime", optional=False),
        clim_source = get_config(config, "clim_historical", optional=False),
        basin_dir = basin_dir,
    script: "src/setup_time_horizon.py"

# Rule to add forcing to the updated model
rule add_forcing:
    input:
        forcing_ini = f"{project_dir}/config/wflow_build_forcing_historical.yml"
    output:
        forcing_fid = f"{project_dir}/climate_historical/wflow_data/inmaps_historical.nc"
    shell:
        """hydromt update wflow "{basin_dir}" -i "{input.forcing_ini}" -d "{DATA_SOURCES}" -vv"""

# Rule to run the wflow model
rule run_wflow:
    input:
        forcing_fid = f"{project_dir}/climate_historical/wflow_data/inmaps_historical.nc"
    output:
        csv_file = f"{basin_dir}/run_default/output.csv"
    params:
        toml_fid = f"{basin_dir}/wflow_sbm.toml"
    shell:
        """ julia --threads 4 -e "using Wflow; Wflow.run()" "{params.toml_fid}" """

# Rule to analyse and plot wflow model run results --> final output
rule plot_results:
   input:
       csv_file = f"{basin_dir}/run_default/output.csv",
       script = "src/plot_results.py"
   output: 
       output_png = f"{project_dir}/plots/wflow_model_performance/hydro_wflow_1.png",
   params:
       project_dir = f"{project_dir}",
       observations_file = observations_timeseries,
       gauges_output_fid = output_locations,
   script: "src/plot_results.py"

# Rule to plot the wflow basin, rivers, gauges and DEM on a map
rule plot_map:
    input:
        gauges_fid = f"{basin_dir}/staticgeoms/gauges.geojson"
    output:
        output_map_png = f"{project_dir}/plots/wflow_model_performance/basin_area.png",
    params:
        project_dir = f"{project_dir}",
        output_locations = output_locations,
    script: "src/plot_map.py"

# Rule to plot the forcing on a map
rule plot_forcing:
    input:
        forcing_fid = f"{project_dir}/climate_historical/wflow_data/inmaps_historical.nc",
    output:
        output_forcing_map = f"{project_dir}/plots/wflow_model_performance/precip.png",
    params:
        project_dir = f"{project_dir}",
        gauges_fid = f"{basin_dir}/staticgeoms/gauges.geojson"
    script: "src/plot_map_forcing.py"
